"use client";
import Head from "next/head";
import { useState } from "react";
import { FaAngleDoubleDown } from "react-icons/fa";
import { FaArrowRotateLeft, FaArrowRotateRight } from "react-icons/fa6";
import { GiRobotGolem } from "react-icons/gi";

export default function Home() {
  const [currentRotation, setCurrentRotation] = useState(0);
  const [robotPosition, setRobotPosition] = useState({ x: 0, y: 0 });

  function rotateRobot(degrees: number) {
    setCurrentRotation((prevRotation) => {
      const newRotation = prevRotation + degrees;
      if (newRotation == 360) {
        return 0;
      } else if (newRotation < 0) {
        return 270;
      }
      return newRotation;
    });
  }

  const moveRobot = () => {
    let newCoordinates = { x: robotPosition.x, y: robotPosition.y };
    switch (currentRotation) {
      //north
      case 0:
        newCoordinates = { x: robotPosition.x, y: robotPosition.y + 1 };
        break;
      //west
      case 90:
        newCoordinates = { x: robotPosition.x - 1, y: robotPosition.y };
        break;
      //south
      case 180:
        newCoordinates = { x: robotPosition.x, y: robotPosition.y - 1 };
        break;
      //east
      case 270:
        newCoordinates = { x: robotPosition.x + 1, y: robotPosition.y };
        break;
    }

    //makes sure robot doesn't go out of bounds
    if (
      newCoordinates.x > 4 ||
      newCoordinates.x < 0 ||
      newCoordinates.y > 4 ||
      newCoordinates.y < 0
    ) {
      setRobotPosition(robotPosition);
    } else {
      setRobotPosition(newCoordinates);
    }
    console.log(robotPosition);
  };

  const Robot = ({ rotation }: { rotation: number }) => {
    return (
      <div style={{ transform: `rotate(${rotation}deg)` }}>
        <GiRobotGolem id="robot" className="mx-auto h-14 w-14 fill-popOrange" />
      </div>
    );
  };

  return (
    <>
      <Head>
        <title>Hyper Robot Project</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-[url('/background-texture-repeat.avif')]">
        <div
          id="app-window"
          className="rounded-lg border-2 bg-white p-2 shadow-lg"
        >
          <div id="titles" className="flex flex-col justify-center">
            <h1 className="font-sans-serif text-center text-2xl font-bold text-wetGranite">
              Hyper Robot Project 9000
            </h1>

            <small className="text-center font-light">
              By Nigel Mckenzie-Ryan
            </small>
          </div>

          <div
            id="robot-grid-container"
            className="flex items-center justify-center"
          >
            <div id="robot-grid" className="grid grid-cols-5 gap-2 p-3">
              {Array.from({ length: 5 }, (_, y) =>
                Array.from({ length: 5 }, (_, x) => (
                  <div
                    key={`${y}-${x}`}
                    className={
                      "flex h-16 w-16 justify-center border-2 border-granite"
                    }
                  >
                    {robotPosition.y === y && robotPosition.x === x && (
                      <Robot rotation={currentRotation} />
                    )}
                  </div>
                )),
              )}
            </div>
          </div>

          <div id="controls" className="flex justify-center gap-2">
            <button
              type="button"
              className="size-14"
              id="left"
              onClick={() => rotateRobot(90)}
              title="Rotate Left"
            >
              <FaArrowRotateLeft className="mx-auto size-14 fill-wetGranite p-1" />
            </button>

            <button
              type="button"
              id="move"
              className="size-14"
              onClick={moveRobot}
              style={{ transform: `rotate(${currentRotation}deg)` }}
              title="Move Robot in direction it is facing"
            >
              <FaAngleDoubleDown className="mx-auto size-14 fill-wetGranite p-1" />
            </button>

            <button
              type="button"
              id="right"
              className="size-14"
              onClick={() => {
                rotateRobot(-90);
              }}
              title="Rotate Right"
            >
              <FaArrowRotateRight className="mx-auto size-14 fill-wetGranite p-1" />
            </button>
          </div>
        </div>
      </main>
    </>
  );
}
